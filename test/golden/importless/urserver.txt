[(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 21}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 31}},KeyNotPresent "enable"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 21}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 31}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 12}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 20}},KeyNotPresent "mkIf"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 12}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 20}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 8, sourceColumn = Pos 38}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 8, sourceColumn = Pos 56}},KeyNotPresent "mkEnableOption"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 8, sourceColumn = Pos 38}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 8, sourceColumn = Pos 56}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 5, sourceColumn = Pos 9}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 5, sourceColumn = Pos 33}},KeyNotPresent "services"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 5, sourceColumn = Pos 9}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 5, sourceColumn = Pos 33}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0})]
[]
âˆ€ Î± Î² Î³. { config = Î±; lib = Î²; pkgs = Î³ } -> { config = { networking = { firewall = { allowedTCPPorts = [Integer]; allowedUDPPorts = [Integer] } }; systemd = { user = { services = { urserver = { after = [String]; description = String; partOf = [String]; serviceConfig = { ExecStart = String; ExecStop = String; Restart = String; RestartSec = Integer; Type = String }; wantedBy = [String] } } } } }; options = { services = { urserver = { enable = String } } } }
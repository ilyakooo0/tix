∀ γ δ ε. { config = γ; lib = δ; pkgs = ε } -> { config = { systemd = { services = { mpd = { after = [String]; description = String; serviceConfig = { ExecStart = String; LimitRTPRIO = Integer; LimitRTTIME = String; NoNewPrivileges = Bool; ProtectControlGroups = Bool; ProtectKernelModules = Bool; ProtectKernelTunables = Bool; ProtectSystem = Bool; Restart = String; RestrictAddressFamilies = String; RestrictNamespaces = Bool; Type = String; User = String }; wantedBy = String } }; sockets = { mpd = { description = String; listenStreams = [String]; socketConfig = { Backlog = Integer; KeepAlive = Bool; PassCredentials = Bool }; wantedBy = [String] } }; tmpfiles = { rules = [String] } }; users = { groups = {  }; users = {  } } }; options = { services = { mpd = { dataDir = { default = String; description = String; type = ∀ β. β }; dbFile = { default = String; defaultText = String; description = String; type = ∀ β. β }; enable = { default = Bool; description = String; type = ∀ β. β }; extraConfig = { default = String; description = String; type = ∀ β. β }; fluidsynth = { default = Bool; description = String; type = ∀ β. β }; group = { default = String; description = String; type = ∀ β. β }; musicDirectory = { default = String; defaultText = String; description = String; type = String }; network = { listenAddress = { default = String; description = String; example = String; type = ∀ α. α }; port = { default = Integer; description = String; type = ∀ α. α } }; playlistDirectory = { default = String; defaultText = String; description = String; type = ∀ β. β }; startWhenNeeded = { default = Bool; description = String; type = ∀ β. β }; user = { default = String; description = String; type = ∀ β. β } } } } }
∀ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β1 γ1 δ1.
( α.autoreconfHook = Null,
  α.buildPackages = β,
  α.fetchFromGitHub =
    {owner = String; repo = String; rev = String; sha256 = γ;} -> δ,
  α.gmock = ε,
  α.sha256 = γ,
  α.stdenv = ζ,
  α.version = η,
  α.zlib = θ,
  ζ.isDarwin = ι,
  ζ.lib = κ,
  ζ.mkDerivation =
    { buildInputs = [θ];
      configureFlags = [String];
      doCheck = Bool;
      dontDisableStatic = Bool;
      enableParallelBuilding = Bool;
      meta =
        { description = String;
          homepage = String;
          license = λ;
          longDescription = String;
          platforms = μ;
        };
      nativeBuildInputs = [Null];
      passthru = {version = η;};
      pname = String;
      postPatch = String;
      src = δ;
      version = η;
    } ->
    ν,
  κ.licenses = ξ,
  ξ.bsd3 = λ,
  ο.platforms = π,
  π.unix = μ,
  ρ.optionalString = ι -> String -> String,
  σ.isDarwin = τ,
  σ.lib = υ,
  σ.mkDerivation =
    { buildInputs = [θ];
      configureFlags = [String];
      doCheck = Bool;
      dontDisableStatic = Bool;
      enableParallelBuilding = Bool;
      meta =
        { description = String;
          homepage = String;
          license = φ;
          longDescription = String;
          platforms = χ;
        };
      nativeBuildInputs = [Null];
      passthru = {version = η;};
      pname = String;
      postPatch = String;
      src = δ;
      version = η;
    } ->
    Null,
  υ.licenses = ψ,
  ψ.bsd3 = φ,
  ω.platforms = α1,
  α1.unix = χ,
  β1.optionalString = τ -> String -> String,
  ζ.buildPlatform = γ1,
  ζ.hostPlatform = γ1,
  β.stdenv = δ1,
  β.which = Null,
  δ1.cc = Null
) =>
α -> ν
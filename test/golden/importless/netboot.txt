∀ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ.
( α.config = β,
  α.lib = γ,
  α.pkgs = δ,
  β.initrd = ε,
  β.squashfsStore = ζ,
  β.storeContents = η,
  β.toplevel = θ,
  γ.literalExample = String -> ι,
  γ.mkOption = {description = String; example = ι;} -> κ,
  δ.callPackage = Path -> {storeContents = η;} -> λ,
  δ.grub2 = μ,
  δ.grub2_efi = μ,
  δ.makeInitrd =
    { compressor = ν;
      contents = [{object = ζ; symlink = String;}];
      prepend = [String];
    } ->
    ξ,
  δ.syslinux = μ,
  δ.system = String,
  δ.writeTextDir = String -> String -> ο,
  π.hostPlatform = δ,
  ρ.stdenv = π,
  σ.build = β,
  τ.system = σ,
  ε.compressor = ν,
  υ.boot = β,
  φ.build = β,
  χ.system = φ,
  ψ.netboot = β
) =>
α ->
{ config =
    { boot =
        { initrd =
            {availableKernelModules = [String]; kernelModules = [String];};
          loader = {grub = {enable = Bool;}; timeout = Integer;};
          postBootCommands = String;
        };
      environment = {systemPackages = [μ];};
      fileSystems =
        { / = {fsType = String; options = [String];};
          /nix/.ro-store =
            { device = String;
              fsType = String;
              neededForBoot = Bool;
              options = [String];
            };
          /nix/.rw-store =
            {fsType = String; neededForBoot = Bool; options = [String];};
          /nix/store = {device = String; fsType = String; options = [String];};
        };
      netboot = {storeContents = [θ];};
      system =
        { build =
            {netbootIpxeScript = ο; netbootRamdisk = ξ; squashfsStore = λ;};
        };
    };
  options = {netboot = {storeContents = κ;};};
}
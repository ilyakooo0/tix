∀ ε ζ η θ. { config = ε; lib = ζ; pkgs = η; utils = θ } -> { config = { assertions = [{ assertion = ∀ δ. δ; message = String }]; boot = { initrd = { supportedFilesystems = ∀ δ. δ } }; system = { build = { bootStage1 = ∀ δ. { fsInfo = δ; isExecutable = Bool; postInstall = String; resumeDevices = ∀ γ. γ; setHostId = String; shell = String; src = Path }; extraUtils = String; initialRamdisk = { contents = [{ object = ∀ α. α; symlink = String }]; name = String }; initialRamdiskSecretAppender = String }; requiredKernelConfig = [String] } }; options = { boot = { initrd = { checkJournalingFS = { default = Bool; description = String; type = ∀ γ. γ }; compressor = { default = String; description = String; example = String; internal = Bool; type = ∀ γ. γ }; enable = { default = Bool; defaultText = String; description = String; type = ∀ γ. γ }; extraUdevRulesCommands = { default = String; description = String; internal = Bool; type = ∀ γ. γ }; extraUtilsCommands = { default = String; description = String; internal = Bool; type = ∀ γ. γ }; extraUtilsCommandsTest = { default = String; description = String; internal = Bool; type = ∀ γ. γ }; mdadmConf = { default = String; description = String; type = ∀ γ. γ }; postDeviceCommands = { default = String; description = String; type = ∀ γ. γ }; postMountCommands = { default = String; description = String; type = ∀ γ. γ }; preDeviceCommands = { default = String; description = String; type = ∀ γ. γ }; preFailCommands = { default = String; description = String; type = ∀ γ. γ }; preLVMCommands = { default = String; description = String; type = ∀ γ. γ }; prepend = { default = ∀ γ. γ; description = String; type = ∀ γ. γ }; secrets = { default = {  }; description = String; example = String; type = ∀ γ. γ }; supportedFilesystems = { default = ∀ γ. γ; description = String; example = [String]; type = ∀ γ. γ } }; loader = { supportsInitrdSecrets = { default = Bool; description = String; internal = Bool; type = ∀ γ. γ } }; resumeDevice = { default = String; description = String; example = String; type = ∀ δ. δ } }; fileSystems = { type = { options = { neededForBoot = { default = Bool; description = String; type = ∀ β. β } } } } } }
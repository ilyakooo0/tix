∀ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β2 γ3 δ4 ε5 ζ6 η7 θ8 ι9 κ10
λ11.
( α.hostPlatform = β,
  α.isAarch32 = γ,
  α.isDarwin = δ,
  α.isMusl = ε,
  α.isWasm = Bool,
  α.libc = String,
  α.mkDerivation =
    { NIX_CFLAGS_COMPILE = [String];
      buildInputs = ζ;
      cmakeFlags = [String];
      enableParallelBuilding = Bool;
      nativeBuildInputs = [η];
      outputs = [String];
      patches = [Path];
      pname = String;
      postInstall = θ;
      postPatch = ι;
      src = κ;
      version = λ;
    } ->
    μ,
  α.name = String,
  α.optional = δ -> ν -> ζ,
  α.optionalString = Bool -> String -> θ,
  α.optionals = Bool -> [String] -> [String],
  α.useLLVM = Bool,
  ξ.hostPlatform = α,
  β.isMusl = Bool,
  ο.kernel = α,
  π.parsed = ο,
  ρ.hostPlatform = π,
  σ.lib = α,
  τ.hostPlatform = α,
  υ.lib = α,
  φ.lib = α,
  χ.lib = α,
  ψ.lib = α,
  ω.lib = α,
  α1.hostPlatform = α,
  β2.lib = α,
  γ3.hostPlatform = α,
  δ4.lib = α,
  ε5.hostPlatform = α,
  ζ6.lib = α,
  η7.hostPlatform = α,
  θ8.hostPlatform = α,
  ι9.lib = α,
  κ10.lib = α,
  λ11.lib = α
) =>
{ cmake = η;
  fetch = String -> String -> κ;
  libcxxabi = ν;
  llvm = η;
  python3 = η;
  stdenv = α;
  version = λ;
} ->
μ
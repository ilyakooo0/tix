∀ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β1 γ1 δ1 ε1 ζ1 η1 θ1 ι1 κ1
λ1 μ1.
( α.hostPlatform = β,
  β.?useLLVM = Bool,
  α.isDarwin = γ,
  α.lib = δ,
  α.mkDerivation =
    { NIX_CFLAGS_COMPILE = [String];
      buildInputs = ε;
      cmakeFlags = [String];
      enableParallelBuilding = Bool;
      nativeBuildInputs = [ζ];
      outputs = [String];
      patches = [String];
      pname = String;
      postInstall = η;
      postPatch = θ;
      src = ι;
      version = κ;
    } ->
    λ,
  μ.isMusl = Bool,
  ν.parsed = ξ,
  ξ.kernel = ο,
  ο.name = String,
  δ.optional = π -> ρ -> ε,
  σ.isDarwin = π,
  τ.optionals = Bool -> [String] -> [String],
  υ.optionals = Bool -> [String] -> [String],
  φ.optionals = Bool -> [String] -> [String],
  χ.optionals = Bool -> [String] -> [String],
  ψ.optional = ω -> String -> [String],
  α1.isMusl = ω,
  β1.optional = Bool -> String -> [String],
  γ1.libc = String,
  δ1.optional = ε1 -> String -> [String],
  ζ1.isAarch32 = ε1,
  η1.optionalString = Bool -> String -> η,
  θ1.isDarwin = Bool,
  ι1.isWasm = Bool,
  κ1.optionalString = Bool -> String -> η,
  λ1.optionalString = γ -> String -> θ,
  μ1.optionalString = Bool -> String -> θ,
  (String | Number) ~ η,
  (String | Number) ~ θ
) =>
{ cmake = ζ;
  fetch = String -> String -> ι;
  libcxxabi = ρ;
  llvm = ζ;
  python3 = ζ;
  stdenv = α;
  version = κ;
} ->
λ
∀ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β1 γ1 δ1 ε1 ζ1 η1 θ1 ι1 κ1
λ1 μ1 ν1 ξ1 ο1 π1 ρ1.
( α.libXcomposite = β,
  α.libXdamage = β,
  α.libpciaccess = β,
  α.xrandr = β,
  γ.optionalString = δ -> String -> ε,
  γ.optionals = ζ -> [String] -> [η],
  γ.versionAtLeast = θ -> String -> ι,
  γ.versionOlder = θ -> String -> κ,
  λ.arch = String,
  λ.isAarch32 = Bool,
  λ.isAarch64 = Bool,
  λ.isDarwin = μ,
  λ.isGNU = ζ,
  λ.isLinux = δ,
  λ.lib = ν,
  ν.AVFoundation = ξ,
  ν.AppKit = ξ,
  ν.ApplicationServices = ξ,
  ν.Cocoa = ξ,
  ν.CoreBluetooth = ξ,
  ν.CoreWLAN = ξ,
  ν.ForceFeedback = ξ,
  ν.Foundation = ξ,
  ν.GameController = ξ,
  ν.IOBluetooth = ξ,
  ν.ImageCaptureCore = ξ,
  ν.LocalAuthentication = ξ,
  ν.Quartz = ξ,
  ν.apple_sdk = ο,
  ν.cctools = ξ,
  ν.libobjc = ξ,
  ν.libunwind = ξ,
  ν.maintainers = π,
  ν.matthewbauer = ρ,
  ν.optional = σ -> String -> τ,
  ν.optionalString = κ -> String -> String,
  ν.optionals = υ -> [φ] -> χ,
  ν.platforms = ψ,
  ω.cc = λ,
  α1.gcc = λ,
  β1.platform = α1,
  γ1.hostPlatform = β1,
  ψ.unix = δ1,
  ε1.hostPlatform = λ,
  ζ1.hostPlatform = λ,
  ο.frameworks = η1,
  θ1.hostPlatform = λ,
  ι1.hostPlatform = λ
) =>
{ alsaLib = β;
  bison = κ1;
  coreutils = κ1;
  cups = φ;
  darwin = λ1;
  dbus = β;
  enableProprietaryCodecs = Bool;
  fetchpatch =
    { extraPrefix = String;
      name = String;
      sha256 = String;
      stripLen = Integer;
      url = String;
    } ->
    μ1;
  ffmpeg_3 = Null;
  flex = κ1;
  fontconfig = β;
  freetype = β;
  git = κ1;
  gn = κ1;
  gperf = κ1;
  harfbuzz = ν1;
  icu = ν1;
  jsoncpp = β;
  lib = γ;
  libXScrnSaver = β;
  libXcursor = β;
  libXrandr = β;
  libXtst = β;
  libcap = β;
  libdrm = β;
  libevent = ν1;
  libjpeg = ν1;
  libopus = ν1;
  libpng = ν1;
  libtiff = ν1;
  libvpx = ν1;
  libwebp = ν1;
  minizip = β;
  ninja = κ1;
  nss = β;
  openbsm = ξ;
  pciutils = β;
  pkgconfig = κ1;
  protobuf = β;
  python2 = κ1;
  qtCompatVersion = θ;
  qtModule =
    { NIX_CFLAGS_COMPILE = [η];
      __impureHostDeps = τ;
      buildInputs = χ;
      doCheck = Bool;
      dontUseGnConfigure = Bool;
      dontUseNinjaBuild = Bool;
      dontUseNinjaInstall = Bool;
      dontUseXcbuild = Bool;
      enableParallelBuilding = Bool;
      hardeningDisable = [String];
      meta = {description = String; maintainers = [ρ]; platforms = δ1;};
      name = String;
      nativeBuildInputs = [κ1];
      outputs = [String];
      patches = [μ1];
      postInstall = ε;
      postPatch = String;
      preConfigure = String;
      propagatedBuildInputs = [ν1];
      qmakeFlags = [String];
      qtInputs = [ξ1];
    } ->
    ο1;
  qtdeclarative = ξ1;
  qtlocation = ξ1;
  qtquickcontrols = ξ1;
  qtwebchannel = ξ1;
  runCommand = String -> {} -> String -> φ;
  snappy = β;
  srtp = ν1;
  stdenv = λ;
  systemd = π1;
  which = κ1;
  writeScriptBin = String -> String -> φ;
  xcbuild = ρ1;
  xorg = α;
  zlib = β;
} ->
ο1
∀ γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β1 γ1 δ1 ε1 ζ1 η1.
( γ //
  { dontBuild = Bool;
    installPhase = String;
    meta = ∀ β. β;
    name = String;
    postInstall = String;
    src = δ;
  } ~
  ε,
  ζ //
  { buildInputs = [η];
    libPath = θ;
    nativeBuildInputs = [η];
    postFixup = String;
    propagatedBuildInputs = [ι];
  } ~
  { buildInputs = [κ];
    cmakeFlags = String;
    meta = ∀ β. β;
    nativeBuildInputs = [η];
    passthru = {wrap = λ; wrapWithBuildEnv = μ;};
    pname = String;
    postFixup = String;
    postInstall = String;
    preConfigure = String;
    src = δ;
    version = ν;
  },
  ξ //
  {buildInputs = [η]; postFixup = String;} ~
  { buildInputs = [κ];
    cmakeFlags = String;
    meta = ∀ β. β;
    nativeBuildInputs = [η];
    passthru = {wrap = λ; wrapWithBuildEnv = μ;};
    pname = String;
    postFixup = String;
    postInstall = String;
    preConfigure = String;
    src = δ;
    version = ν;
  },
  ο.?scripts = [π],
  ρ.?scripts = [π],
  σ.lib = τ,
  σ.mkDerivation =
    { buildInputs = [κ];
      cmakeFlags = String;
      meta = ∀ α. α;
      nativeBuildInputs = [η];
      passthru = {wrap = λ; wrapWithBuildEnv = μ;};
      pname = String;
      postFixup = String;
      postInstall = String;
      preConfigure = String;
      src = δ;
      version = ν;
    } ->
    ι,
  τ.strings = υ,
  υ.baseName = π,
  υ.concatStringsSep = String -> φ -> χ,
  υ.licenses = ψ,
  υ.magnetophon = ω,
  υ.maintainers = α1,
  υ.map = (β1 -> String) -> [ι] -> φ,
  υ.platforms = γ1,
  υ.pmahoney = ω,
  υ.src = δ,
  υ.version = ν,
  υ.wrap = λ,
  υ.wrapWithBuildEnv = μ,
  ψ.gpl2 = δ1,
  γ1.linux = ε1,
  τ.makeLibraryPath = [ι] -> θ
) =>
{ cmake = η;
  coreutils = ζ1;
  emscripten = κ;
  fetchFromGitHub =
    { fetchSubmodules = Bool;
      owner = String;
      repo = String;
      rev = String;
      sha256 = String;
    } ->
    η1;
  gnutls = κ;
  libmicrohttpd = κ;
  libsndfile = κ;
  libtasn1 = κ;
  llvm = κ;
  makeWrapper = η;
  openssl = κ;
  p11-kit = κ;
  pkgconfig = η;
  stdenv = σ;
  vim = η;
  which = η;
} ->
ι
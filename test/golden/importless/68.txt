∀ β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω.
( β.buildPlatform = γ,
  β.hostPlatform = γ,
  β.lib = δ,
  β.mkDerivation =
    { buildInputs = [ε];
      configureFlags = [String];
      configurePlatforms = ∀ α. α;
      depsBuildBuild = [ζ];
      enableParallelBuilding = Bool;
      meta =
        { description = String;
          homepage = String;
          license = η;
          maintainers = [θ];
          platforms = ι;
        };
      nativeBuildInputs = [κ];
      outputs = [String];
      pname = String;
      preConfigure = String;
      preFixup = String;
      setOutputFlags = Bool;
      src = λ;
      version = String;
    } ->
    μ,
  ν.python3 = ξ,
  ν.stdenv = ο,
  π.llvm = κ,
  ρ.six = σ,
  δ.licenses = τ,
  δ.maintainers = υ,
  δ.optionals = Bool -> [String] -> [String],
  δ.platforms = φ,
  τ.gpl2 = η,
  υ.abbradar = θ,
  φ.linux = ι,
  ξ.withPackages = (ρ -> [σ]) -> χ,
  ο.cc = ζ
) =>
{ autoconf213 = κ;
  buildPackages = ν;
  cargo = κ;
  fetchpatch = ψ;
  fetchurl = {sha256 = String; url = String;} -> λ;
  icu = ε;
  llvmPackages = π;
  perl = κ;
  pkgconfig = κ;
  python2 = κ;
  python3 = ω;
  readline = ε;
  rustc = κ;
  stdenv = β;
  which = κ;
  zip = κ;
  zlib = ε;
} ->
μ
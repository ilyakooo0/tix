∀ γ δ ε. { config = γ; lib = δ; pkgs = ε } -> { config = { systemd = { services = { traefik = { after = [String]; description = String; serviceConfig = { AmbientCapabilities = String; CapabilityBoundingSet = String; ExecStart = String; Group = ∀ α. α; LimitNOFILE = Integer; LimitNPROC = Integer; NoNewPrivileges = Bool; PrivateDevices = Bool; PrivateTmp = Bool; ProtectHome = Bool; ProtectSystem = String; ReadWriteDirectories = ∀ α. α; Restart = String; StartLimitBurst = Integer; StartLimitInterval = Integer; Type = String; User = String }; wantedBy = [String] } }; tmpfiles = { rules = [String] } }; users = { groups = { traefik = {  } }; users = { traefik = { createHome = Bool; group = String; home = ∀ β. β; isSystemUser = Bool } } } }; options = { services = { traefik = { dataDir = { default = String; description = String; type = ∀ β. β }; dynamicConfigFile = { default = Null; description = String; example = String; type = ∀ β. β }; dynamicConfigOptions = { default = {  }; description = String; example = { http = { routers = { router1 = { rule = String; service = String } }; services = { service1 = { loadBalancer = { servers = [{ url = String }] } } } } }; type = { description = String; emptyValue = { value = {  } } } }; enable = String; group = { default = String; description = String; example = String; type = ∀ β. β }; package = { default = ∀ β. β; defaultText = String; description = String; type = ∀ β. β }; staticConfigFile = { default = Null; description = String; example = String; type = ∀ β. β }; staticConfigOptions = { default = { entryPoints = { http = { address = String } } }; description = String; example = { api = {  }; entryPoints = { http = { address = String }; web = { address = String } } }; type = { description = String; emptyValue = { value = {  } } } } } } } }
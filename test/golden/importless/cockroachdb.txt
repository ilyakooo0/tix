∀ ε ζ η. { config = ε; lib = ζ; pkgs = η } -> { config = { assertions = [{ assertion = Bool; message = String }]; environment = { systemPackages = [∀ γ. γ] }; networking = { firewall = { allowedTCPPorts = ∀ γ. [γ] } }; systemd = { services = { cockroachdb = { after = [String]; description = String; documentation = [String]; requires = [String]; serviceConfig = { ExecStart = [String]; Restart = String; RestartSec = Integer; StateDirectory = String; StateDirectoryMode = String; TimeoutStopSec = Integer; Type = String; User = ∀ α. α }; unitConfig = { RequiresMountsFor = String }; wantedBy = [String] } } }; users = { groups = { cockroachdb = { gid = ∀ β. β } }; users = { cockroachdb = { description = String; group = ∀ β. β; uid = ∀ β. β } } } }; meta = { maintainers = ∀ δ. [δ] }; options = { services = { cockroachdb = { cache = { default = String; description = String; type = ∀ β. β }; certsDir = { default = Null; description = String; type = ∀ β. β }; enable = String; group = { default = String; description = String; type = ∀ β. β }; http = Integer; insecure = { default = Bool; description = String; type = ∀ β. β }; join = { default = Null; description = String; type = ∀ β. β }; listen = Integer; locality = { default = Null; description = String; type = ∀ β. β }; maxSqlMemory = { default = String; description = String; type = ∀ β. β }; openPorts = { default = Bool; description = String; type = ∀ β. β }; package = { default = ∀ β. β; defaultText = String; description = String; type = ∀ β. β }; user = { default = String; description = String; type = ∀ β. β } } } } }
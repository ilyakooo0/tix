∀ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β1 γ1.
( α.config = β,
  α.lib = γ,
  α.pkgs = δ,
  β.networking = ε,
  β.virtualisation = ζ,
  γ.coreutils = η,
  γ.findutils = η,
  γ.gawk = η,
  γ.gnugrep = η,
  γ.makeWrapper = θ,
  γ.mkIf =
    ι ->
    { assertions = [{assertion = Bool; message = String;}];
      boot = {initrd = {kernelModules = [String];};};
      environment = {etc = {waagent.conf = {text = String;};};};
      networking =
        { dhcpcd = {persistent = Bool;};
          firewall = {allowedUDPPorts = [Number];};
        };
      services =
        { logrotate = {config = String; enable = Bool;};
          udev = {packages = [κ];};
        };
      systemd =
        { services =
            { consume-hypervisor-entropy =
                { before = [String];
                  description = String;
                  path = [λ];
                  script = String;
                  serviceConfig =
                    { RemainAfterExit = Bool;
                      StandardError = String;
                      StandardOutput = String;
                      Type = String;
                    };
                  wantedBy = [String];
                };
              waagent =
                { after = [String];
                  description = String;
                  path = [μ];
                  serviceConfig = {ExecStart = String; Type = String;};
                  unitConfig = {ConditionPathExists = String;};
                  wantedBy = [String];
                  wants = [String];
                };
            };
          targets = {provisioned = {description = String;};};
        };
    } ->
    ν,
  γ.mkOption = {default = Bool; description = String;} -> ξ,
  γ.nettools = η,
  γ.openssh = η,
  γ.openssl = η,
  γ.parted = η,
  γ.procps = η,
  γ.python = θ,
  γ.pythonPackages = ο,
  γ.shadow = η,
  γ.stdenv = π,
  γ.utillinux = η,
  δ.bash = μ,
  δ.coreutils = λ,
  δ.e2fsprogs = μ,
  δ.fetchFromGitHub =
    {owner = String; repo = String; rev = String; sha256 = String;} -> ρ,
  δ.stdenv = σ,
  δ.writeScript = String -> String -> τ,
  π.mkDerivation =
    { buildInputs = [θ];
      buildPhase = Bool;
      configurePhase = Bool;
      installPhase = String;
      name = String;
      patches = [String];
      pythonPath = [υ];
      runtimeDeps = [η];
      src = ρ;
    } ->
    κ,
  ο.pyasn1 = υ,
  φ.wrapPython = θ,
  ζ.azure = χ,
  χ.agent = ψ,
  ψ.enable = ι,
  σ.isi686 = Bool,
  ω.isx86_64 = Bool,
  ε.networkmanager = α1,
  α1.enable = Bool
) =>
α ->
{ config = ν;
  options =
    { virtualisation =
        { azure =
            { agent =
                {enable = ξ; mountResourceDisk = β1; verboseLogging = γ1;};
            };
        };
    };
}
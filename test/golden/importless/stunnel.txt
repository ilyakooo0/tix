∀ δ ε ζ. { config = δ; lib = ε; pkgs = ζ } -> { config = { assertions = [{ assertion = Bool; message = String }]; environment = { etc = { stunnel.cfg = { text = String } }; systemPackages = ∀ γ. [γ] }; meta = { maintainers = ∀ γ. [γ] }; systemd = { services = { stunnel = { after = [String]; description = String; restartTriggers = ∀ β. [β]; serviceConfig = { ExecStart = String; Type = String }; wantedBy = [String]; wants = [String] } } } }; options = { services = { stunnel = { clients = { default = {  }; description = String; example = { foobar = { accept = String; connect = String; verifyChain = Bool } }; type = { options = { CAFile = { default = String; description = String; type = ∀ α. α }; CAPath = { default = Null; description = String; type = ∀ α. α }; accept = { description = String; type = ∀ α. α }; connect = { description = String; type = ∀ α. α }; verifyChain = { default = Bool; description = String; type = ∀ α. α }; verifyHostname = { default = Null; description = String; type = ∀ α. α }; verifyPeer = { default = Bool; description = String; type = ∀ α. α } } } }; enable = { default = Bool; description = String; type = ∀ β. β }; enableInsecureSSLv3 = { default = Bool; description = String; type = ∀ β. β }; fipsMode = { default = Bool; description = String; type = ∀ β. β }; group = { default = String; description = String; type = ∀ β. β }; logLevel = { default = String; description = String; type = [String] }; servers = { default = {  }; description = String; example = { fancyWebserver = { accept = Integer; cert = String; connect = Integer; enable = Bool } }; type = { options = { accept = { description = String; type = ∀ α. α }; cert = { description = String; type = ∀ α. α }; connect = { description = String; type = ∀ α. α } } } }; user = { default = String; description = String; type = ∀ β. β } } } } }
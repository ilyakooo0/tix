[(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 21}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 44}},KeyNotPresent "maintainers"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 21}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 44}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 48}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 53}},UndefinedVariable "fdl12"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 41}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 47}},UndefinedVariable "lgpl21"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 36}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 40}},UndefinedVariable "gpl2"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 15}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 55}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 5}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 20}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 32}},KeyNotPresent "licenses"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 20}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 32}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1})]
[]
âˆ€ Î³ Î´ Îµ Î¶. { extra-cmake-modules = Î³; lib = Î´; mkDerivation = { meta = { license = âˆ€ Î±. [Î±]; maintainers = âˆ€ Î±. [Î±] }; name = String; nativeBuildInputs = [Î³]; propagatedBuildInputs = [Îµ] } -> Î¶; qtbase = Îµ; qtdeclarative = Îµ } -> { meta = { license = âˆ€ Î². [Î²]; maintainers = âˆ€ Î². [Î²] }; name = String; nativeBuildInputs = [Î³]; propagatedBuildInputs = [Îµ] }
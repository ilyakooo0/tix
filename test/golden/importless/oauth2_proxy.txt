∀ γ δ ε. { config = γ; lib = δ; pkgs = ε } -> { config = { services = { oauth2_proxy = { clientID = Null; clientSecret = Null; cookie = { secret = Null } } }; systemd = { services = { oauth2_proxy = { after = [String]; description = String; path = ∀ β. [β]; serviceConfig = { EnvironmentFile = ∀ α. α; ExecStart = String; Restart = String; User = String }; wantedBy = [String] } } }; users = { users = { oauth2_proxy = { description = String; isSystemUser = Bool } } } }; options = { services = { oauth2_proxy = { approvalPrompt = { default = String; description = String; type = [String] }; azure = { resource = { description = String; type = ∀ α. α }; tenant = { default = String; description = String; type = ∀ α. α } }; basicAuthPassword = { default = Null; description = String; type = ∀ β. β }; clientID = { description = String; example = String; type = ∀ β. β }; clientSecret = { description = String; type = ∀ β. β }; cookie = { domain = { default = Null; description = String; example = String; type = ∀ α. α }; expire = { default = String; description = String; type = ∀ α. α }; httpOnly = { default = Bool; description = String; type = ∀ α. α }; name = { default = String; description = String; type = ∀ α. α }; refresh = { default = Null; description = String; example = String; type = ∀ α. α }; secret = { description = String; type = ∀ α. α }; secure = { default = Bool; description = String; type = ∀ α. α } }; customTemplatesDir = { default = Null; description = String; type = ∀ β. β }; email = { addresses = { default = Null; description = String; type = ∀ α. α }; domains = { default = ∀ α. α; description = String; type = ∀ α. α } }; enable = String; extraConfig = { default = {  }; description = String }; github = { org = { default = Null; description = String; type = ∀ α. α }; team = { default = Null; description = String; type = ∀ α. α } }; google = { adminEmail = { description = String; type = ∀ α. α }; groups = { default = ∀ α. α; description = String; type = ∀ α. α }; serviceAccountJSON = { description = String; type = ∀ α. α } }; htpasswd = { displayForm = { default = Bool; description = String; type = ∀ α. α }; file = { default = Null; description = String; type = ∀ α. α } }; httpAddress = { default = String; description = String; type = ∀ β. β }; keyFile = { default = Null; description = String; example = String; type = ∀ β. β }; loginURL = { default = Null; description = String; example = String; type = ∀ β. β }; package = { default = ∀ β. β; defaultText = String; description = String; type = ∀ β. β }; passAccessToken = { default = Bool; description = String; type = ∀ β. β }; passBasicAuth = { default = Bool; description = String; type = ∀ β. β }; passHostHeader = { default = Bool; description = String; type = ∀ β. β }; profileURL = { default = Null; description = String; type = ∀ β. β }; provider = { default = String; description = String; type = [String] }; proxyPrefix = { default = String; description = String; type = ∀ β. β }; redeemURL = { default = Null; description = String; example = String; type = ∀ β. β }; redirectURL = { default = Null; description = String; example = String; type = ∀ β. β }; requestLogging = { default = Bool; description = String; type = ∀ β. β }; reverseProxy = { default = Bool; description = String; type = ∀ β. β }; scope = { default = Null; description = String; type = ∀ β. β }; setXauthrequest = { default = Bool; description = String; type = ∀ β. β }; signatureKey = { default = Null; description = String; example = String; type = ∀ β. β }; skipAuthRegexes = { default = ∀ β. β; description = String; type = ∀ β. β }; tls = { certificate = { description = String; type = ∀ α. α }; enable = { default = Bool; description = String; type = ∀ α. α }; httpsAddress = { default = String; description = String; type = ∀ α. α }; key = { description = String; type = ∀ α. α } }; upstream = { default = ∀ β. β; description = String; type = ∀ β. β }; validateURL = { default = Null; description = String; example = String; type = ∀ β. β } } } } }
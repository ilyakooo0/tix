∀ γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β1 γ1 δ1 ε1 ζ1.
( γ //
  { dontBuild = Bool;
    installPhase = String;
    meta = ∀ β. β;
    name = String;
    postInstall = String;
    src = δ;
  } ~
  ε,
  ζ //
  { buildInputs = [η];
    nativeBuildInputs = [θ];
    postFixup = String;
    propagatedBuildInputs = [ι];
  } ~
  { buildInputs = [η];
    meta = ∀ β. β;
    passthru = {wrap = κ; wrapWithBuildEnv = λ;};
    pname = String;
    postFixup = String;
    postInstall = String;
    preConfigure = String;
    src = δ;
    version = μ;
  },
  ν //
  {buildInputs = [η]; postFixup = String;} ~
  { buildInputs = [η];
    meta = ∀ β. β;
    passthru = {wrap = κ; wrapWithBuildEnv = λ;};
    pname = String;
    postFixup = String;
    postInstall = String;
    preConfigure = String;
    src = δ;
    version = μ;
  },
  ξ.?scripts = [ο],
  π.?scripts = [ο],
  ρ.lib = σ,
  ρ.mkDerivation =
    { buildInputs = [η];
      meta = ∀ α. α;
      passthru = {wrap = κ; wrapWithBuildEnv = λ;};
      pname = String;
      postFixup = String;
      postInstall = String;
      preConfigure = String;
      src = δ;
      version = μ;
    } ->
    ι,
  σ.strings = τ,
  τ.baseName = ο,
  τ.concatStringsSep = String -> υ -> φ,
  τ.licenses = χ,
  τ.magnetophon = ψ,
  τ.maintainers = ω,
  τ.map = (α1 -> String) -> [ι] -> υ,
  τ.platforms = β1,
  τ.pmahoney = ψ,
  τ.src = δ,
  τ.version = μ,
  τ.wrap = κ,
  τ.wrapWithBuildEnv = λ,
  χ.gpl2 = γ1,
  β1.linux = δ1
) =>
{ coreutils = ε1;
  fetchurl = {sha256 = String; url = String;} -> ζ1;
  makeWrapper = η;
  pkgconfig = θ;
  stdenv = ρ;
} ->
ι
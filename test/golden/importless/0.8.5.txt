[(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 27, sourceColumn = Pos 7}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 27, sourceColumn = Pos 37}},KeyNotPresent "lib"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 27, sourceColumn = Pos 7}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 27, sourceColumn = Pos 37}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 25, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 25, sourceColumn = Pos 43}},KeyNotPresent "meta"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 25, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 25, sourceColumn = Pos 43}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 3}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 15}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 41}},KeyNotPresent "lib"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 15}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 41}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 3, sourceColumn = Pos 1}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 3, sourceColumn = Pos 20}},KeyNotPresent "mkDerivation"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 3, sourceColumn = Pos 1}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 3, sourceColumn = Pos 20}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0})]
[]
âˆ€ Î² Î³ Î´ Îµ. { camlp4 = Î²; fetchpatch = { sha256 = String; url = String } -> Î³; fetchurl = { sha256 = String; url = String } -> Î´; findlib = Î²; ocaml = Î²; stdenv = Îµ } -> { buildInputs = [Î²]; createFindlibDestdir = Bool; meta = { description = String; homepage = String; license = âˆ€ Î±. Î±; maintainers = âˆ€ Î±. [Î±]; platforms = âˆ€ Î±. Î± }; patches = [{ sha256 = String; url = String }]; pname = String; src = { sha256 = String; url = String }; version = String }
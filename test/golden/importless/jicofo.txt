∀ γ δ ε. { config = γ; lib = δ; pkgs = ε } -> { config = { environment = { etc = { jitsi/jicofo/logging.properties = { source = String }; jitsi/jicofo/sip-communicator.properties = { source = ∀ α. α } } }; services = { jicofo = { config = { org.jitsi.jicofo.BRIDGE_MUC = ∀ α. α } } }; systemd = { services = { jicofo = { after = [String]; description = String; environment = { JAVA_SYS_PROPS = { -Djava.util.logging.config.file = String; -Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION = String; -Dnet.java.sip.communicator.SC_HOME_DIR_NAME = String } }; restartTriggers = ∀ α. [α]; script = String; serviceConfig = { CapabilityBoundingSet = String; DynamicUser = Bool; Group = String; LockPersonality = Bool; NoNewPrivileges = Bool; PrivateDevices = Bool; PrivateTmp = Bool; ProtectControlGroups = Bool; ProtectHome = Bool; ProtectHostname = Bool; ProtectKernelModules = Bool; ProtectKernelTunables = Bool; ProtectSystem = String; RestrictAddressFamilies = [String]; RestrictNamespaces = Bool; RestrictRealtime = Bool; RestrictSUIDSGID = Bool; Type = String; User = String }; wantedBy = [String] } } }; users = { groups = { jitsi-meet = {  } } } }; meta = { maintainers = ∀ β. β }; options = { services = { jicofo = { bridgeMuc = { description = String; example = String; type = ∀ α. α }; componentPasswordFile = { description = String; example = String; type = ∀ α. α }; config = { default = {  }; description = String; example = String; type = ∀ α. α }; enable = String; userDomain = { description = String; example = String; type = ∀ α. α }; userName = { default = String; description = String; type = ∀ α. α }; userPasswordFile = { description = String; example = String; type = ∀ α. α }; xmppDomain = { description = String; example = String; type = ∀ α. α }; xmppHost = { description = String; example = String; type = ∀ α. α } } } } }
∀ β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ.
( β.hostPlatform = γ,
  β.lib = δ,
  β.mkDerivation =
    {buildPhase = String; installPhase = String; name = String; src = ε;} -> ζ,
  η.meta = θ,
  ι.strings = κ,
  λ.override = {pip = Null;} -> μ,
  ν.override = {setuptools = Null; wheel = Null;} -> μ,
  γ.isWindows = Bool,
  δ.licenses = ξ,
  δ.psfl = ο,
  δ.zpl20 = ο,
  θ.platforms = π,
  κ.optionalString = Bool -> String -> ρ
) =>
{ bootstrapped-pip = μ;
  buildPythonPackage =
    { catchConflicts = Bool;
      doCheck = Bool;
      format = String;
      meta =
        { description = String;
          homepage = String;
          license = [ο];
          platforms = π;
          priority = Number;
        };
      nativeBuildInputs = [μ];
      pipInstallFlags = [String];
      pname = ∀ α. α;
      preBuild = ρ;
      src = ζ;
      version = ∀ α. α;
    } ->
    σ;
  callPackage = τ;
  fetchFromGitHub =
    { name = String;
      owner = String;
      repo = String;
      rev = String;
      sha256 = String;
    } ->
    ε;
  lib = ι;
  pipInstallHook = λ;
  python = η;
  setuptoolsBuildHook = ν;
  stdenv = β;
  unzip = υ;
  wrapPython = φ;
} ->
σ
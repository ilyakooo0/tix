∀ ζ η θ. { config = ζ; lib = η; pkgs = θ } -> { config = { assertions = [{ assertion = Bool; message = String }]; services = { gitea = { database = { passwordFile = { name = String; text = ∀ β. β } }; settings = { database = [{ DB_TYPE = ∀ α. α }]; log = { LEVEL = ∀ β. β; ROOT_PATH = ∀ β. β }; mailer = { PASSWD = String }; repository = { ROOT = ∀ β. β }; security = { INSTALL_LOCK = Bool; SECRET_KEY = String }; server = [{ DOMAIN = ∀ α. α; LFS_JWT_SECRET = String; ROOT_URL = ∀ α. α; STATIC_ROOT_PATH = ∀ α. α }]; service = { DISABLE_REGISTRATION = ∀ β. β }; session = { COOKIE_NAME = String; COOKIE_SECURE = ∀ β. β } } }; mysql = { enable = Bool; ensureDatabases = ∀ δ. [δ]; ensureUsers = [{ ensurePermissions = { .* = String }; name = ∀ β. β }]; package = ∀ δ. δ }; postgresql = { enable = Bool; ensureDatabases = ∀ δ. [δ]; ensureUsers = [{ ensurePermissions = { DATABASE  = String }; name = ∀ β. β }] } }; systemd = { services = { gitea = { after = [String]; description = String; environment = { GITEA_WORK_DIR = ∀ β. β; HOME = ∀ β. β; USER = ∀ β. β }; path = [∀ β. β]; preStart = String; serviceConfig = { CapabilityBoundingSet = String; ExecStart = String; Group = String; LockPersonality = Bool; MemoryDenyWriteExecute = Bool; NoNewPrivileges = Bool; PrivateDevices = Bool; PrivateMounts = Bool; PrivateTmp = Bool; PrivateUsers = Bool; ProtectClock = Bool; ProtectControlGroups = Bool; ProtectHome = Bool; ProtectHostname = Bool; ProtectKernelLogs = Bool; ProtectKernelModules = Bool; ProtectKernelTunables = Bool; ProtectSystem = String; ReadWritePaths = ∀ β. [β]; Restart = String; RestrictAddressFamilies = [String]; RestrictRealtime = Bool; RestrictSUIDSGID = Bool; RuntimeDirectory = String; RuntimeDirectoryMode = String; SystemCallArchitectures = String; SystemCallFilter = String; Type = String; UMask = String; User = ∀ β. β; WorkingDirectory = ∀ β. β }; wantedBy = [String] }; gitea-dump = { after = [String]; description = String; environment = { GITEA_WORK_DIR = ∀ β. β; HOME = ∀ β. β; USER = ∀ β. β }; path = [∀ β. β]; serviceConfig = { ExecStart = String; Type = String; User = ∀ β. β; WorkingDirectory = ∀ β. β }; wantedBy = [String] } }; timers = { gitea-dump = { description = String; partOf = [String]; timerConfig = { OnCalendar = ∀ β. β }; wantedBy = [String] } }; tmpfiles = { rules = [String] } }; users = { groups = { gitea = {  } }; users = { gitea = { description = String; group = String; home = ∀ γ. γ; isSystemUser = Bool; useDefaultShell = Bool } } }; warnings = ∀ ε. [ε] }; meta = { maintainers = ∀ ε. [ε] }; options = { services = { gitea = { appName = { default = String; description = String; type = ∀ γ. γ }; cookieSecure = { default = Bool; description = String; type = ∀ γ. γ }; database = { createDatabase = { default = Bool; description = String; type = ∀ β. β }; host = { default = String; description = String; type = ∀ β. β }; name = { default = String; description = String; type = ∀ β. β }; password = { default = String; description = String; type = ∀ β. β }; passwordFile = { default = Null; description = String; example = String; type = ∀ β. β }; path = { default = String; description = String; type = ∀ β. β }; port = { default = Integer; description = String; type = ∀ β. β }; socket = { default = String; defaultText = String; description = String; example = String; type = ∀ β. β }; type = { default = String; description = String; example = String; type = [String] }; user = { default = String; description = String; type = ∀ β. β } }; disableRegistration = { description = String }; domain = { default = String; description = String; type = ∀ γ. γ }; dump = { backupDir = { default = String; description = String; type = ∀ β. β }; enable = { default = Bool; description = String; type = ∀ β. β }; interval = { default = String; description = String; example = String; type = ∀ β. β } }; enable = { default = Bool; description = String; type = ∀ γ. γ }; enableUnixSocket = { default = Bool; description = String; type = ∀ γ. γ }; extraConfig = { default = Null; description = String; type = ∀ γ. γ }; httpAddress = { default = String; description = String; type = ∀ γ. γ }; httpPort = { default = Integer; description = String; type = ∀ γ. γ }; lfs = { contentDir = { default = String; description = String; type = ∀ β. β }; enable = { default = Bool; description = String; type = ∀ β. β } }; log = { level = { default = String; description = String; type = [String] }; rootPath = { default = String; description = String; type = ∀ β. β } }; mailerPasswordFile = { default = Null; description = String; example = String; type = ∀ γ. γ }; package = { default = ∀ γ. γ; defaultText = String; description = String; type = ∀ γ. γ }; repositoryRoot = { default = String; description = String; type = ∀ γ. γ }; rootUrl = { default = String; description = String; type = ∀ γ. γ }; settings = { default = {  }; description = String; example = String; type = ∀ γ. [γ] }; ssh = { clonePort = { default = Integer; description = String; example = Integer; type = ∀ β. β }; enable = { default = Bool; description = String; type = ∀ β. β } }; stateDir = { default = String; description = String; type = ∀ γ. γ }; staticRootPath = { default = String; description = String; example = String; type = ∀ γ. γ }; useWizard = { default = Bool; description = String; type = ∀ γ. γ }; user = { default = String; description = String; type = ∀ γ. γ } } } } }
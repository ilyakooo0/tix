[(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 51}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 60}},UndefinedVariable "inetutils"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 44}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 50}},UndefinedVariable "procps"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 34}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 43}},UndefinedVariable "utillinux"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 24, sourceColumn = Pos 62}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 21, sourceColumn = Pos 36}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 21, sourceColumn = Pos 47}},KeyNotPresent "torque"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 21, sourceColumn = Pos 36}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 21, sourceColumn = Pos 47}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 20, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 20, sourceColumn = Pos 27}},KeyNotPresent "enable"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 20, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 20, sourceColumn = Pos 27}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 20, sourceColumn = Pos 12}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 20, sourceColumn = Pos 16}},UndefinedVariable "mkIf"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 14, sourceColumn = Pos 16}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 14, sourceColumn = Pos 30}},UndefinedVariable "mkEnableOption"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 7, sourceColumn = Pos 12}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 7, sourceColumn = Pos 23}},KeyNotPresent "torque"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 7, sourceColumn = Pos 12}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 7, sourceColumn = Pos 23}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 6, sourceColumn = Pos 9}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 6, sourceColumn = Pos 38}},KeyNotPresent "services"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 6, sourceColumn = Pos 9}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 6, sourceColumn = Pos 38}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 3, sourceColumn = Pos 1}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 97, sourceColumn = Pos 1}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 2})]
[]
âˆ€ Î³ Î´ Îµ. { config = Î³; lib = Î´; pkgs = Îµ } -> { config = { environment = { systemPackages = âˆ€ Î². [Î²] }; systemd = { services = { torque-scheduler = { after = [String]; path = [âˆ€ Î±. Î±]; requires = [String]; serviceConfig = { ExecStart = String; PIDFile = String; Type = String } }; torque-server = { after = [String]; before = [String]; path = [âˆ€ Î±. Î±]; requires = [String]; serviceConfig = { ExecStart = String; ExecStop = String; PIDFile = String; Type = String }; wantedBy = [String]; wants = [String] }; torque-server-init = { path = [âˆ€ Î±. Î±]; script = String; serviceConfig = { RemainAfterExit = Bool; Type = String }; unitConfig = { ConditionPathExists = String } }; trqauthd = { after = [String]; path = [âˆ€ Î±. Î±]; requires = [String]; serviceConfig = { ExecStart = String; Type = String } } } } }; options = { services = { torque = { server = { enable = String } } } } }
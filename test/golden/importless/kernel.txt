∀ ζ η θ. { config = ζ; lib = η; pkgs = θ } -> { config = [{ boot = { initrd = { availableKernelModules = [String]; kernelModules = [String] } } }]; options = { boot = { consoleLogLevel = { default = Integer; description = String; type = ∀ γ. γ }; extraModulePackages = { default = ∀ γ. γ; description = String; example = String; type = ∀ γ. γ }; initrd = { availableKernelModules = { default = ∀ β. β; description = String; example = [String]; type = ∀ β. β }; kernelModules = { default = ∀ β. β; description = String; type = ∀ β. β } }; kernel = { features = { default = {  }; description = String; example = String; internal = Bool }; randstructSeed = { default = String; description = String; example = String; type = ∀ β. β } }; kernelModules = { default = ∀ γ. γ; description = String; type = ∀ γ. γ }; kernelPackages = { apply = ∀ γ δ ε. γ -> δ -> ε -> { kernel = { features = ∀ α. α; kernelPatches = ∀ α. [α] } }; default = ∀ γ. γ; defaultText = String; description = String; example = String; type = { merge = ∀ β. β } }; kernelParams = { default = ∀ γ. γ; description = String; type = ∀ γ. γ }; kernelPatches = { default = ∀ γ. γ; description = String; example = String; type = ∀ γ. γ }; vesa = { default = Bool; description = String; type = ∀ γ. γ } }; system = { modulesTree = { apply = ∀ γ. γ; default = ∀ γ. γ; description = String; internal = Bool; type = ∀ γ. γ }; requiredKernelConfig = { default = ∀ γ. γ; description = String; example = String; internal = Bool; type = ∀ γ. γ } } } }
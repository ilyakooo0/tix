[(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 40}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 55}},KeyNotPresent "rPackages"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 40}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 55}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 39}},KeyNotPresent "recurseIntoAttrs"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 11, sourceColumn = Pos 39}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 46}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 67}},KeyNotPresent "haskellPackages"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 46}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 67}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 23}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 45}},KeyNotPresent "recurseIntoAttrs"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 23}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 10, sourceColumn = Pos 45}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0})]
[]
{ allowAliases = Bool; packageOverrides = âˆ€ Î². Î² -> { haskellPackages = âˆ€ Î±. Î±; rPackages = âˆ€ Î±. Î± } }
[(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 332, sourceColumn = Pos 56}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 332, sourceColumn = Pos 69}},KeyNotPresent "clusterIp"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 332, sourceColumn = Pos 56}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 332, sourceColumn = Pos 69}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 332, sourceColumn = Pos 46}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 332, sourceColumn = Pos 55}},UndefinedVariable "mkDefault"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 312, sourceColumn = Pos 23}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 312, sourceColumn = Pos 36}},KeyNotPresent "clusterIp"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 312, sourceColumn = Pos 23}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 312, sourceColumn = Pos 36}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 299, sourceColumn = Pos 36}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 299, sourceColumn = Pos 44}},UndefinedVariable "toString"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 204, sourceColumn = Pos 27}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 204, sourceColumn = Pos 76}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 48}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 204, sourceColumn = Pos 32}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 204, sourceColumn = Pos 43}},KeyNotPresent "coredns"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 204, sourceColumn = Pos 32}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 204, sourceColumn = Pos 43}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 186, sourceColumn = Pos 22}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 186, sourceColumn = Pos 34}},KeyNotPresent "replicas"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 186, sourceColumn = Pos 22}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 186, sourceColumn = Pos 34}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 177, sourceColumn = Pos 49}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 177, sourceColumn = Pos 66}},KeyNotPresent "reconcileMode"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 177, sourceColumn = Pos 49}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 177, sourceColumn = Pos 66}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 146, sourceColumn = Pos 49}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 146, sourceColumn = Pos 66}},KeyNotPresent "reconcileMode"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 146, sourceColumn = Pos 49}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 146, sourceColumn = Pos 66}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 45}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 56}},KeyNotPresent "coredns"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 45}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 56}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 18}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 44}},KeyNotPresent "dockerTools"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 18}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 44}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 7}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 67, sourceColumn = Pos 16}},UndefinedVariable "singleton"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 65, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 65, sourceColumn = Pos 27}},KeyNotPresent "enable"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 65, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 65, sourceColumn = Pos 27}},UnexpectedType {expected = NAttrSet (fromList []), got = NBrujin (DeBrujin 0 0)}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 65, sourceColumn = Pos 12}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 65, sourceColumn = Pos 16}},UndefinedVariable "mkIf"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 55, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 55, sourceColumn = Pos 25}},KeyNotPresent "attrs"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 55, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 55, sourceColumn = Pos 25}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 34}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 55, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 55, sourceColumn = Pos 19}},UndefinedVariable "types"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 53, sourceColumn = Pos 15}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 53, sourceColumn = Pos 23}},UndefinedVariable "mkOption"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 50, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 50, sourceColumn = Pos 24}},KeyNotPresent "enum"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 50, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 50, sourceColumn = Pos 24}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 29}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 50, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 50, sourceColumn = Pos 19}},UndefinedVariable "types"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 41, sourceColumn = Pos 21}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 41, sourceColumn = Pos 29}},UndefinedVariable "mkOption"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 38, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 38, sourceColumn = Pos 23}},KeyNotPresent "int"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 38, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 38, sourceColumn = Pos 23}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 25}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 38, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 38, sourceColumn = Pos 19}},UndefinedVariable "types"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 35, sourceColumn = Pos 16}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 35, sourceColumn = Pos 24}},UndefinedVariable "mkOption"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 32, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 32, sourceColumn = Pos 23}},KeyNotPresent "str"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 32, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 32, sourceColumn = Pos 23}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 21}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 32, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 32, sourceColumn = Pos 19}},UndefinedVariable "types"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 29, sourceColumn = Pos 21}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 29, sourceColumn = Pos 29}},UndefinedVariable "mkOption"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 26, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 26, sourceColumn = Pos 23}},KeyNotPresent "str"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 26, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 26, sourceColumn = Pos 23}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 17}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 26, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 26, sourceColumn = Pos 19}},UndefinedVariable "types"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 23, sourceColumn = Pos 35}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 23, sourceColumn = Pos 93}},KeyNotPresent "services"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 23, sourceColumn = Pos 35}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 23, sourceColumn = Pos 93}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 23, sourceColumn = Pos 19}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 23, sourceColumn = Pos 30}},UndefinedVariable "splitString"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 23, sourceColumn = Pos 11}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 23, sourceColumn = Pos 15}},UndefinedVariable "take"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 22, sourceColumn = Pos 9}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 22, sourceColumn = Pos 25}},UndefinedVariable "concatStringsSep"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 17, sourceColumn = Pos 17}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 17, sourceColumn = Pos 25}},UndefinedVariable "mkOption"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 15, sourceColumn = Pos 14}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 15, sourceColumn = Pos 28}},UndefinedVariable "mkEnableOption"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 7, sourceColumn = Pos 9}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 7, sourceColumn = Pos 46}},KeyNotPresent "services"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 7, sourceColumn = Pos 9}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 7, sourceColumn = Pos 46}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 0}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 3, sourceColumn = Pos 1}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 335, sourceColumn = Pos 1}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 2})]
[CanNotUnify (NAtomic String) (NTypeVariable 13 :-> NTypeVariable 16),CanNotUnify (NAtomic Integer) (NTypeVariable 13 :-> NTypeVariable 15),CanNotUnify (NAtomic String) (NTypeVariable 13 :-> NTypeVariable 14)]
∀ ε ζ η. { config = ε; lib = ζ; pkgs = η } -> { config = { services = { kubernetes = { addonManager = { addons = { coredns-cm = { apiVersion = String; data = { Corefile = String }; kind = String; metadata = { labels = { addonmanager.kubernetes.io/mode = ∀ α. α; k8s-app = String; kubernetes.io/cluster-service = String }; name = String; namespace = String } }; coredns-deploy = { apiVersion = String; kind = String; metadata = { labels = { addonmanager.kubernetes.io/mode = ∀ α. α; k8s-app = String; kubernetes.io/cluster-service = String; kubernetes.io/name = String }; name = String; namespace = String }; spec = { replicas = ∀ β. β; selector = { matchLabels = { k8s-app = String } }; strategy = { rollingUpdate = { maxUnavailable = Integer }; type = String }; template = { metadata = { labels = { k8s-app = String } }; spec = { containers = [{ args = [String]; image = String; imagePullPolicy = String; livenessProbe = { failureThreshold = Integer; httpGet = { path = String; port = Integer; scheme = String }; initialDelaySeconds = Integer; successThreshold = Integer; timeoutSeconds = Integer }; name = String; ports = [{ containerPort = Integer; name = String; protocol = String }]; resources = { limits = { memory = String }; requests = { cpu = String; memory = String } }; securityContext = { allowPrivilegeEscalation = Bool; capabilities = { drop = [String] }; readOnlyRootFilesystem = Bool }; volumeMounts = [{ mountPath = String; name = String; readOnly = Bool }] }]; dnsPolicy = String; nodeSelector = { beta.kubernetes.io/os = String }; serviceAccountName = String; tolerations = [{ effect = String; key = String }]; volumes = [{ configMap = { items = [{ key = String; path = String }]; name = String }; name = String }] } } } }; coredns-sa = { apiVersion = String; kind = String; metadata = { labels = { addonmanager.kubernetes.io/mode = String; k8s-app = String; kubernetes.io/cluster-service = String }; name = String; namespace = String } }; coredns-svc = { apiVersion = String; kind = String; metadata = { annotations = { prometheus.io/port = Integer; prometheus.io/scrape = String }; labels = { addonmanager.kubernetes.io/mode = String; k8s-app = String; kubernetes.io/cluster-service = String; kubernetes.io/name = String }; name = String; namespace = String }; spec = { clusterIP = ∀ β. β; ports = [{ name = String; port = Integer; protocol = String; targetPort = Integer }]; selector = { k8s-app = String } } } }; bootstrapAddons = { coredns-cr = { apiVersion = String; kind = String; metadata = { labels = { addonmanager.kubernetes.io/mode = String; k8s-app = String; kubernetes.io/bootstrapping = String; kubernetes.io/cluster-service = String }; name = String }; rules = [{ apiGroups = [String]; resources = [String]; verbs = [String] }] }; coredns-crb = { apiVersion = String; kind = String; metadata = { annotations = { rbac.authorization.kubernetes.io/autoupdate = String }; labels = { addonmanager.kubernetes.io/mode = String; k8s-app = String; kubernetes.io/bootstrapping = String; kubernetes.io/cluster-service = String }; name = String }; roleRef = { apiGroup = String; kind = String; name = String }; subjects = [{ kind = String; name = String; namespace = String }] } } }; kubelet = { clusterDns = ∀ δ. δ; seedDockerImages = ∀ δ. δ } } } }; options = { services = { kubernetes = { addons = { dns = { clusterDomain = { default = String; description = String; type = ∀ γ. γ }; clusterIp = { default = String; description = String; type = ∀ γ. γ }; coredns = { default = { finalImageTag = String; imageDigest = String; imageName = String; sha256 = String }; description = String; type = ∀ γ. γ }; enable = String; reconcileMode = { default = String; description = String; type = [String] }; replicas = { default = Integer; description = String; type = ∀ γ. γ } } } } } } }
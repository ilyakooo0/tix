∀ ε ζ η. { config = ε; lib = ζ; pkgs = η } -> { config = { services = { kubernetes = { addonManager = { addons = { coredns-cm = { apiVersion = String; data = { Corefile = String }; kind = String; metadata = { labels = { addonmanager.kubernetes.io/mode = ∀ α. α; k8s-app = String; kubernetes.io/cluster-service = String }; name = String; namespace = String } }; coredns-deploy = { apiVersion = String; kind = String; metadata = { labels = { addonmanager.kubernetes.io/mode = ∀ α. α; k8s-app = String; kubernetes.io/cluster-service = String; kubernetes.io/name = String }; name = String; namespace = String }; spec = { replicas = ∀ β. β; selector = { matchLabels = { k8s-app = String } }; strategy = { rollingUpdate = { maxUnavailable = Integer }; type = String }; template = { metadata = { labels = { k8s-app = String } }; spec = { containers = [{ args = [String]; image = String; imagePullPolicy = String; livenessProbe = { failureThreshold = Integer; httpGet = { path = String; port = Integer; scheme = String }; initialDelaySeconds = Integer; successThreshold = Integer; timeoutSeconds = Integer }; name = String; ports = [{ containerPort = Integer; name = String; protocol = String }]; resources = { limits = { memory = String }; requests = { cpu = String; memory = String } }; securityContext = { allowPrivilegeEscalation = Bool; capabilities = { drop = [String] }; readOnlyRootFilesystem = Bool }; volumeMounts = [{ mountPath = String; name = String; readOnly = Bool }] }]; dnsPolicy = String; nodeSelector = { beta.kubernetes.io/os = String }; serviceAccountName = String; tolerations = [{ effect = String; key = String }]; volumes = [{ configMap = { items = [{ key = String; path = String }]; name = String }; name = String }] } } } }; coredns-sa = { apiVersion = String; kind = String; metadata = { labels = { addonmanager.kubernetes.io/mode = String; k8s-app = String; kubernetes.io/cluster-service = String }; name = String; namespace = String } }; coredns-svc = { apiVersion = String; kind = String; metadata = { annotations = { prometheus.io/port = Integer; prometheus.io/scrape = String }; labels = { addonmanager.kubernetes.io/mode = String; k8s-app = String; kubernetes.io/cluster-service = String; kubernetes.io/name = String }; name = String; namespace = String }; spec = { clusterIP = ∀ β. β; ports = [{ name = String; port = Integer; protocol = String; targetPort = Integer }]; selector = { k8s-app = String } } } }; bootstrapAddons = { coredns-cr = { apiVersion = String; kind = String; metadata = { labels = { addonmanager.kubernetes.io/mode = String; k8s-app = String; kubernetes.io/bootstrapping = String; kubernetes.io/cluster-service = String }; name = String }; rules = [{ apiGroups = [String]; resources = [String]; verbs = [String] }] }; coredns-crb = { apiVersion = String; kind = String; metadata = { annotations = { rbac.authorization.kubernetes.io/autoupdate = String }; labels = { addonmanager.kubernetes.io/mode = String; k8s-app = String; kubernetes.io/bootstrapping = String; kubernetes.io/cluster-service = String }; name = String }; roleRef = { apiGroup = String; kind = String; name = String }; subjects = [{ kind = String; name = String; namespace = String }] } } }; kubelet = { clusterDns = ∀ δ. δ; seedDockerImages = ∀ δ. δ } } } }; options = { services = { kubernetes = { addons = { dns = { clusterDomain = { default = String; description = String; type = ∀ γ. γ }; clusterIp = { default = String; description = String; type = ∀ γ. γ }; coredns = { default = { finalImageTag = String; imageDigest = String; imageName = String; sha256 = String }; description = String; type = ∀ γ. γ }; enable = String; reconcileMode = { default = String; description = String; type = [String] }; replicas = { default = Integer; description = String; type = ∀ γ. γ } } } } } } }
[(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 28, sourceColumn = Pos 57}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 28, sourceColumn = Pos 64}},KeyNotPresent "jq"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 28, sourceColumn = Pos 57}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 28, sourceColumn = Pos 64}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 19, sourceColumn = Pos 23}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 19, sourceColumn = Pos 39}},KeyNotPresent "makeWrapper"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 19, sourceColumn = Pos 23}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 19, sourceColumn = Pos 39}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 16, sourceColumn = Pos 28}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 16, sourceColumn = Pos 52}},KeyNotPresent "stdenv"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 16, sourceColumn = Pos 28}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 16, sourceColumn = Pos 52}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1}),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 4, sourceColumn = Pos 18}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 4, sourceColumn = Pos 35}},KeyNotPresent "writeTextDir"),(SrcSpan {spanBegin = SourcePos {sourceName = "<string>", sourceLine = Pos 4, sourceColumn = Pos 18}, spanEnd = SourcePos {sourceName = "<string>", sourceLine = Pos 4, sourceColumn = Pos 35}},UnexpectedType {expected = NAttrSet (fromList []), got = NTypeVariable 1})]
[CanNotUnify (NAtomic String) (NAtomic String :-> NTypeVariable 4)]
âˆ€ Î´. { system = Î´ } -> { baseConfig = âˆ€ Î³. { pkgs = Î³ } -> { environment = { systemPackages = [{ buildInputs = âˆ€ Î±. [Î±]; dontUnpack = Bool; installPhase = String; name = String; postFixup = String }] }; nix = { binaryCaches = âˆ€ Î². Î²; buildMachines = [{ hostName = String; systems = [Î´] }]; distributedBuilds = Bool }; services = { hydra = { enable = Bool; extraConfig = String; hydraURL = String; notificationSender = String }; postfix = { enable = Bool } }; time = { timeZone = String }; virtualisation = { memorySize = Integer } } }
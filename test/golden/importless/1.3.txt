∀ β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β1 γ1.
( β.?hostPlatform = γ,
  γ.?platform = δ,
  δ.?gcc = ε,
  ε.?arch = String,
  β.isDarwin = Bool,
  β.lib = ζ,
  β.mkDerivation =
    { LD_LIBRARY_PATH = η;
      buildInputs = [θ];
      checkTarget = String;
      doCheck = Bool;
      enableParallelBuilding = Bool;
      makeFlags = [String];
      meta =
        { broken = Bool;
          description = String;
          homepage = String;
          license = ι;
          maintainers = [κ];
          platforms = [String];
        };
      nativeBuildInputs = [λ];
      passthru =
        { maintenanceVersion = String;
          majorVersion = String;
          minorVersion = String;
          site = String;
        };
      patches = [Path];
      pname = String;
      postInstall = String;
      postPatch = String;
      preBuild = String;
      preCheck = String;
      prePatch = String;
      src = μ;
      version = ∀ α. α;
    } ->
    ν,
  β.system = ξ,
  θ.dev = θ,
  θ.isILP64 = Bool,
  ζ.garrison = κ,
  ζ.head = ο -> π,
  ζ.makeLibraryPath = [θ] -> η,
  ζ.raskin = κ,
  ζ.rob = κ,
  ζ.splitString = String -> ξ -> ο,
  ζ.throw = String -> ρ,
  σ.licenses = τ,
  τ.mit = ι,
  υ.maintainers = φ,
  χ.optionals = ψ -> [ω] -> [θ]
) =>
{ ApplicationServices = ω;
  CoreServices = ω;
  arpack = θ;
  blas = θ;
  cmake = α1;
  curl = λ;
  fetchFromGitHub = β1;
  fetchurl = γ1;
  fetchzip = {sha256 = String; url = String;} -> μ;
  fftw = θ;
  fftwSinglePrec = θ;
  gfortran = λ;
  gmp = θ;
  lapack = θ;
  libgit2 = θ;
  libunwind = θ;
  m4 = λ;
  makeWrapper = λ;
  mpfr = θ;
  openlibm = θ;
  openspecfun = θ;
  patchelf = λ;
  pcre2 = θ;
  perl = λ;
  python2 = λ;
  readline = θ;
  stdenv = β;
  utf8proc = θ;
  which = λ;
  zlib = θ;
} ->
ν
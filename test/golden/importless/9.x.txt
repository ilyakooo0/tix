∀ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β1.
( α.isDarwin = β,
  α.isLinux = γ,
  α.lib = δ,
  δ.licenses = ε,
  δ.maintainers = ζ,
  δ.optional = Bool -> [Null] -> [η],
  δ.optionals = Bool -> [String] -> [String],
  δ.platforms = θ,
  δ.tfmoraes = ι,
  δ.unix = κ,
  λ.optionalString = μ,
  ν.optionals = β -> [ξ] -> ο,
  π.optionalString = ρ -> String -> σ,
  ε.bsd3 = τ
) =>
{ ApplicationServices = υ;
  CFNetwork = υ;
  Cocoa = υ;
  CoreServices = υ;
  CoreText = υ;
  DiskArbitration = υ;
  GLUT = υ;
  IOKit = υ;
  IOSurface = υ;
  ImageIO = υ;
  OpenGL = υ;
  Security = υ;
  cmake = φ;
  enablePython = Bool;
  enableQt = Bool;
  fetchpatch = χ;
  fetchurl = {sha256 = String; url = String;} -> ψ;
  libGL = ω;
  libGLU = ω;
  libX11 = ω;
  libXt = ω;
  libobjc = ξ;
  libtiff = η;
  mkDerivation =
    { buildInputs = [η];
      cmakeFlags = [String];
      enableParallelBuilding = Bool;
      meta =
        { description = String;
          homepage = String;
          license = τ;
          maintainers = [ι];
          platforms = κ;
        };
      name = String;
      nativeBuildInputs = [φ];
      postPatch = σ;
      preBuild = String;
      propagatedBuildInputs = ο;
      src = ψ;
    } ->
    α1;
  python = Null;
  qtbase = β1;
  qttools = β1;
  qtx11extras = β1;
  stdenv = α;
  xorgproto = ω;
  xpc = υ;
} ->
α1
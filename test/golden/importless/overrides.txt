∀ ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω α1 β2 γ3 δ4 ε5 ζ6 η7 θ8 ι9. ∀ ε. { ApplicationServices = ζ; Carbon = η; Cocoa = η; Xplugin = η; abiCompat = Null; autoconf = η; automake = η; autoreconfHook = θ; bison = ι; bootstrap_cmds = ε; buildPackages = κ; clangStdenv = λ; dbus = μ; ed = ν; epoxy = ξ; fetchFromGitLab = { domain = String; group = String; owner = String; repo = String; rev = String; sha256 = String } -> ο; fetchpatch = { sha256 = String; url = String } -> π; fetchurl = { sha256 = String; url = String } -> ρ; flex = ι; fontconfig = σ; freetype = σ; gettext = τ; intltool = υ; libGL = μ; libGLU = μ; libdrm = ε; libiconv = φ; libtool = η; libunwind = χ; llvm_6 = ψ; makeWrapper = ω; mcpp = α1; mesa = ψ; meson = β2; ninja = β2; openssl = ε; pkgconfig = γ3; python3 = δ4; spice-protocol = ε5; stdenv = λ; tradcpp = ζ6; udev = η7; zlib = η7 } -> θ8 -> ι9 -> { bdftopcf = ∀ δ. δ -> { buildInputs = ∀ γ. [γ] }; bitmap = ∀ δ. δ -> { nativeBuildInputs = [ω]; postInstall = String }; editres = ∀ δ. δ -> { hardeningDisable = [String] }; encodings = ∀ δ. δ -> { buildInputs = ∀ γ. [γ] }; fontbhttf = ∀ δ. δ -> { meta = { license = ∀ β. β } }; fontmiscmisc = ∀ δ. δ -> { postInstall = String }; fonttosfnt = ∀ δ. δ -> { patches = [Path] }; imake = ∀ δ. δ -> { CFLAGS = String; patches = [Path]; setupHook = Path; tradcpp = ζ6; x11BuildHook = Path }; libAppleWM = ∀ δ. δ -> { buildInputs = [ζ]; preConfigure = String }; libICE = ∀ δ. δ -> { outputs = [String] }; libSM = ∀ δ. δ -> { outputs = [String]; propagatedBuildInputs = ∀ γ. [γ] }; libX11 = ∀ δ. δ -> { CPP = String; configureFlags = ∀ γ. [γ]; depsBuildBuild = ∀ γ. [γ]; outputs = [String]; postInstall = String; preConfigure = String; propagatedBuildInputs = ∀ γ. [γ] }; libXScrnSaver = ∀ δ. δ -> { buildInputs = ∀ γ. [γ]; configureFlags = ∀ γ. [γ] }; libXau = ∀ δ. δ -> { outputs = [String]; propagatedBuildInputs = ∀ γ. [γ] }; libXaw = ∀ δ. δ -> { outputs = [String]; propagatedBuildInputs = ∀ γ. [γ] }; libXcomposite = ∀ δ. δ -> { outputs = [String]; propagatedBuildInputs = ∀ γ. [γ] }; libXcursor = ∀ δ. δ -> { outputs = [String] }; libXdamage = ∀ δ. δ -> { outputs = [String] }; libXdmcp = ∀ δ. δ -> { outputs = [String] }; libXext = ∀ δ. δ -> { configureFlags = ∀ γ. [γ]; outputs = [String]; propagatedBuildInputs = ∀ γ. [γ] }; libXfixes = ∀ δ. δ -> { outputs = [String] }; libXfont = ∀ δ. δ -> { configureFlags = String; outputs = [String]; propagatedBuildInputs = [σ] }; libXft = ∀ δ. δ -> { configureFlags = ∀ γ. [γ]; outputs = [String]; passthru = { fontconfig = σ; freetype = σ }; patches = [{ sha256 = String; url = String }]; postInstall = String; propagatedBuildInputs = [σ] }; libXi = ∀ δ. δ -> { configureFlags = String; outputs = [String]; propagatedBuildInputs = ∀ γ. [γ] }; libXinerama = ∀ δ. δ -> { configureFlags = ∀ γ. [γ]; outputs = [String] }; libXmu = ∀ δ. δ -> { buildFlags = [String]; outputs = [String] }; libXp = ∀ δ. δ -> { outputs = [String] }; libXpm = ∀ δ. δ -> { outputs = [String]; patchPhase = String }; libXpresent = ∀ δ. δ -> { buildInputs = ∀ γ. [γ] }; libXrandr = ∀ δ. δ -> { configureFlags = ∀ γ. [γ]; outputs = [String]; propagatedBuildInputs = ∀ γ. [γ] }; libXrender = ∀ δ. δ -> { configureFlags = ∀ γ. [γ]; outputs = [String]; propagatedBuildInputs = ∀ γ. [γ] }; libXres = ∀ δ. δ -> { buildInputs = ∀ γ. [γ]; configureFlags = ∀ γ. [γ]; outputs = [String] }; libXt = ∀ δ. δ -> { CPP = String; configureFlags = ∀ γ. [γ]; depsBuildBuild = ∀ γ. [γ]; outputs = [String]; preConfigure = String; propagatedBuildInputs = ∀ γ. [γ] }; libXv = ∀ δ. δ -> { configureFlags = ∀ γ. [γ]; outputs = [String] }; libXvMC = ∀ δ. δ -> { buildInputs = ∀ γ. [γ]; configureFlags = ∀ γ. [γ]; outputs = [String] }; libXxf86dga = ∀ δ. δ -> { configureFlags = ∀ γ. [γ] }; libXxf86misc = ∀ δ. δ -> { configureFlags = ∀ γ. [γ] }; libXxf86vm = ∀ δ. δ -> { configureFlags = ∀ γ. [γ]; outputs = [String] }; libdmx = ∀ δ. δ -> { configureFlags = ∀ γ. [γ] }; libpciaccess = ∀ δ. δ -> { meta = { platforms = ∀ β. β } }; libxcb = ∀ δ. δ -> { configureFlags = [String]; outputs = [String] }; libxkbfile = ∀ δ. δ -> { outputs = [String] }; libxshmfence = ∀ δ. δ -> { name = String; outputs = [String]; src = { sha256 = String; url = String } }; lndir = ∀ δ. δ -> { buildInputs = ∀ γ. γ; preConfigure = String }; luit = ∀ δ. δ -> { buildInputs = [φ]; configureFlags = [String] }; mkfontdir = ∀ δ. δ; sessreg = ∀ δ. δ -> { preBuild = String }; setxkbmap = ∀ δ. δ -> { postInstall = String }; twm = ∀ δ. δ -> { nativeBuildInputs = [ι] }; utilmacros = ∀ δ. δ -> { propagatedBuildInputs = [η] }; x11perf = ∀ δ. δ -> { buildInputs = [σ] }; xauth = ∀ δ. δ -> { doCheck = Bool }; xcalc = ∀ δ. δ -> { configureFlags = [String]; nativeBuildInputs = [ω]; postInstall = String }; xcbproto = { python = δ4 }; xcbutil = ∀ δ. δ -> { outputs = [String] }; xcbutilcursor = ∀ δ. δ -> { meta = { maintainers = ∀ β. [β] }; outputs = [String] }; xcbutilimage = ∀ δ. δ -> { outputs = [String] }; xcbutilkeysyms = ∀ δ. δ -> { outputs = [String] }; xcbutilrenderutil = ∀ δ. δ -> { outputs = [String] }; xcbutilwm = ∀ δ. δ -> { outputs = [String] }; xcursorthemes = ∀ δ. δ -> { buildInputs = ∀ γ. [γ]; configureFlags = [String] }; xdpyinfo = ∀ δ. δ -> { configureFlags = ∀ γ. [γ] }; xdriinfo = ∀ δ. δ -> { buildInputs = [μ] }; xf86inputevdev = ∀ δ. δ -> { installFlags = [String]; outputs = [String]; preBuild = String }; xf86inputjoystick = ∀ δ. δ -> { installFlags = [String] }; xf86inputlibinput = ∀ δ. δ -> { installFlags = [String]; outputs = [String] }; xf86inputmouse = ∀ δ. δ -> { installFlags = [String] }; xf86inputsynaptics = ∀ δ. δ -> { installFlags = [String]; outputs = [String] }; xf86inputvmmouse = ∀ δ. δ -> { configureFlags = [String]; meta = { platforms = [String] } }; xf86videoamdgpu = ∀ δ. δ -> { configureFlags = [String] }; xf86videoark = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videoati = ∀ δ. δ -> { NIX_CFLAGS_COMPILE = String }; xf86videogeode = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videoglide = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videoi128 = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videointel = ∀ δ. δ -> { buildInputs = ∀ γ. [γ]; configureFlags = [String]; meta = { platforms = [String] }; name = String; nativeBuildInputs = [θ]; src = { domain = String; group = String; owner = String; repo = String; rev = String; sha256 = String } }; xf86videonewport = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videoomap = ∀ δ. δ -> { NIX_CFLAGS_COMPILE = [String] }; xf86videoqxl = ∀ δ. δ -> { buildInputs = [ε5] }; xf86videos3virge = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videosavage = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videosiliconmotion = ∀ δ. δ -> { meta = { platforms = [String] } }; xf86videotga = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videov4l = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videovmware = ∀ δ. δ -> { buildInputs = [ψ]; meta = { platforms = [String] } }; xf86videovoodoo = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videowsfb = ∀ δ. δ -> { meta = { broken = Bool } }; xf86videoxgi = ∀ δ. δ -> { patches = [{ sha256 = String; url = String }] }; xinit = ∀ δ. δ -> { buildInputs = ∀ γ. [γ]; configureFlags = [String]; prePatch = String; propagatedBuildInputs = ∀ γ. [γ] }; xkbcomp = ∀ δ. δ -> { configureFlags = [String] }; xkeyboardconfig = ∀ δ. δ -> { configureFlags = [String]; nativeBuildInputs = [υ]; postInstall = String }; xkeyboardconfig_custom = ∀ δ. { layouts = {  } } -> δ -> { buildInputs = [η]; postPatch = {  } }; xload = ∀ δ. δ -> { nativeBuildInputs = [τ] }; xlsfonts = ∀ δ. δ -> { meta = { license = ∀ β. β } }; xorgcffiles = ∀ δ. δ -> { postInstall = String }; xorgproto = ∀ δ. δ -> { buildInputs = ∀ γ. γ; mesonFlags = [String]; nativeBuildInputs = [β2]; propagatedBuildInputs = ∀ γ. γ }; xorgserver = { buildInputs = ∀ γ. [γ]; patchPhase = String } -> { buildInputs = ∀ γ. [γ]; configureFlags = [String]; outputs = [String]; passthru = { version = { buildInputs = ∀ α. [α]; patchPhase = String } }; patchPhase = String; postInstall = String; prePatch = String; propagatedBuildInputs = [η7] }; xrandr = ∀ δ. δ -> { postInstall = String }; xrdb = ∀ δ. δ -> { configureFlags = [String] }; xvinfo = ∀ δ. δ -> { buildInputs = ∀ γ. [γ] }; xwd = ∀ δ. δ -> { buildInputs = ∀ γ. [γ] } }
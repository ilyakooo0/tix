∀ β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ.
( (β) // (γ) ~ ({buildInputs = [δ]; name = String;}),
  ( { buildInputs = [ε];
      buildPhase = String;
      buildPlugins = [ζ];
      compilePorts = Bool;
      configurePhase = String;
      dontStrip = Bool;
      installPhase = String;
      meta = ∀ α. α;
      name = String;
      passthru = {beamDeps = [ζ]; env = η; packageName = θ;};
      postPatch = String;
      propagatedBuildInputs = ι;
      setupHook = κ;
      src = λ;
      version = μ;
    }
  ) //
  ( ν
  ) ~
  ( γ
  ),
  ξ.lib = ο,
  ξ.mkDerivation = {buildInputs = [δ]; name = String;} -> η,
  ε.debugInfo = Bool,
  ε.meta = π,
  ρ.optionalString = Bool -> String -> σ,
  β.beamDeps = [ζ],
  β.buildInputs = [ε],
  β.buildPhase = Null,
  β.buildPlugins = [ζ],
  β.compilePorts = Bool,
  β.configurePhase = Null,
  β.enableDebugInfo = Bool,
  β.installPhase = Null,
  β.meta = {},
  β.name = θ,
  β.postPatch = String,
  β.setupHook = Null,
  β.src = λ,
  β.version = μ,
  ο.filterAttrs =
    (τ -> Null -> Bool) ->
    { buildPhase = Null;
      configurePhase = Null;
      installPhase = Null;
      setupHook = Null;
    } ->
    ν,
  ο.fix = (δ -> η) -> υ,
  ο.unique = [ζ] -> ι,
  π.platforms = φ
) =>
{ erlang = ε;
  lib = ρ;
  libyaml = ε;
  openssl = ε;
  pc = ζ;
  rebar3 = ε;
  stdenv = ξ;
  writeText = String -> String -> κ;
} ->
β -> υ